import 'dotenv/config';
import { createServer } from 'node:http';
import { createYoga } from 'graphql-yoga';
import mongoose from 'mongoose';
import { makeExecutableSchema } from '@graphql-tools/schema';
import { typeDefs } from './graphql/typeDefs/index.js';
import resolvers from './graphql/resolvers/index.js';
import connectDB from './db/connection.js';

const port = process.env.PORT || 4000;
const nodeEnv = process.env.NODE_ENV || 'development';

/**
 * Starts the GraphQL Yoga server
 */
async function start() {
  try {
    console.log(`\n🔧 Starting <%= projectName %> server in ${nodeEnv} mode...`);

    // Connect to MongoDB
    await connectDB();

    // Create executable schema
    const schema = makeExecutableSchema({
      typeDefs,
      resolvers,
    });

    // Create Yoga instance
    const yoga = createYoga({
      schema,
      context: ({ request }) => ({
        ip: request.headers.get('x-forwarded-for') || 'unknown',
        userAgent: request.headers.get('user-agent'),
      }),
      graphiql: nodeEnv !== 'production',
      logging: {
        debug: nodeEnv === 'development' ? console.debug : () => {},
        info: console.info,
        warn: console.warn,
        error: console.error,
      },
      maskedErrors: nodeEnv === 'production',
    });

    // Create HTTP server
    const server = createServer(yoga);

    // Health check endpoint
    server.on('request', (req, res) => {
      if (req.url === '/health' && req.method === 'GET') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(
          JSON.stringify({
            status: 'ok',
            timestamp: new Date().toISOString(),
            uptime: process.uptime(),
            mongodb: mongoose.connection.readyState === 1 ? 'connected' : 'disconnected',
          })
        );
        return;
      }
    });

    // Start server
    server.listen(port, () => {
      console.log(`\n🚀 Server ready!`);
      console.log(`   GraphQL endpoint: http://localhost:${port}/graphql`);
      console.log(`   Health check:     http://localhost:${port}/health`);
      console.log(`   Environment:      ${nodeEnv}`);
      console.log(`\n💡 Press Ctrl+C to stop\n`);
    });

    // Graceful shutdown
    const shutdown = async (signal) => {
      console.log(`\n\n⚠️  ${signal} received, shutting down gracefully...`);

      server.close(async () => {
        console.log('✅ HTTP server closed');

        try {
          await mongoose.connection.close();
          console.log('✅ MongoDB connection closed');
          process.exit(0);
        } catch (err) {
          console.error('❌ Error during shutdown:', err);
          process.exit(1);
        }
      });

      // Force shutdown after 10 seconds
      setTimeout(() => {
        console.error('❌ Forced shutdown after timeout');
        process.exit(1);
      }, 10000);
    };

    process.on('SIGTERM', () => shutdown('SIGTERM'));
    process.on('SIGINT', () => shutdown('SIGINT'));
  } catch (error) {
    console.error('\n❌ Failed to start server:', error.message);
    console.error(error);
    process.exit(1);
  }
}

start().catch((error) => {
  console.error('Startup error:', error);
  process.exit(1);
});
