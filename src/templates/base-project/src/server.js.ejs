import 'dotenv/config';
import express from 'express';
import http from 'http';
import { ApolloServer } from 'apollo-server-express';
import mongoose from 'mongoose';
import { typeDefs } from './graphql/typeDefs/index.js';
import resolvers from './graphql/resolvers/index.js';
import connectDB from './db/connection.js';

const port = process.env.PORT || 4000;
const nodeEnv = process.env.NODE_ENV || 'development';

/**
 * Starts the Express + Apollo GraphQL server
 */
async function start() {
  try {
    console.log(`\n🔧 Starting <%= projectName %> server in ${nodeEnv} mode...`);

    // Connect to MongoDB
    await connectDB();

    // Initialize Express
    const app = express();
    app.use(express.json());

    // Health check endpoint
    app.get('/health', (req, res) => {
      res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        mongodb: mongoose.connection.readyState === 1 ? 'connected' : 'disconnected',
      });
    });

    // Initialize Apollo Server
    const apollo = new ApolloServer({
      typeDefs,
      resolvers,
      context: ({ req }) => ({
        ip: req.ip,
        userAgent: req.headers['user-agent'],
      }),
      introspection: nodeEnv !== 'production',
      playground: nodeEnv !== 'production',
      formatError: (error) => {
        console.error('GraphQL Error:', error);
        return error;
      },
    });

    await apollo.start();
    apollo.applyMiddleware({ app, path: '/graphql' });

    // Start HTTP server
    const server = http.createServer(app);
    server.listen({ port }, () => {
      console.log(`\n🚀 Server ready!`);
      console.log(`   GraphQL endpoint: http://localhost:${port}${apollo.graphqlPath}`);
      console.log(`   Health check:     http://localhost:${port}/health`);
      console.log(`   Environment:      ${nodeEnv}`);
      console.log(`\n💡 Press Ctrl+C to stop\n`);
    });

    // Graceful shutdown
    const shutdown = async (signal) => {
      console.log(`\n\n⚠️  ${signal} received, shutting down gracefully...`);

      server.close(async () => {
        console.log('✅ HTTP server closed');

        try {
          await mongoose.connection.close();
          console.log('✅ MongoDB connection closed');
          process.exit(0);
        } catch (err) {
          console.error('❌ Error during shutdown:', err);
          process.exit(1);
        }
      });

      // Force shutdown after 10 seconds
      setTimeout(() => {
        console.error('❌ Forced shutdown after timeout');
        process.exit(1);
      }, 10000);
    };

    process.on('SIGTERM', () => shutdown('SIGTERM'));
    process.on('SIGINT', () => shutdown('SIGINT'));
  } catch (error) {
    console.error('\n❌ Failed to start server:', error.message);
    console.error(error);
    process.exit(1);
  }
}

start().catch((error) => {
  console.error('Startup error:', error);
  process.exit(1);
});
